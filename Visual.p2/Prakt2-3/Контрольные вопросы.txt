Контрольные вопросы:  
1. Как работает механизм подсветки синтаксиса в QSyntaxHighlighter?
QSyntaxHighliter подсвечивает части текста из QTextEdit или точнее из QTextDocument. У этого класса есть метод highlightBlock, который отвечает за то, как синтаксис будет выглядеть. Для того, чтобы применить подсветки необходимо создать сущность класса QSyntaxHighliter и в конструкторе указать к какому текстовому документу он будет применяться. После чего метод highlightBlock() будет автоматически вызываться, когда это нужно (когда текст вводится). highlightBlock() может менять формат и цвет вводимого текста (блоков текста) в зависимости от того, на каком языке мы пишем.

------------------------------------------------------------------------------------------------------------------------

2. Что делает метод rehighlight() и почему он важен при изменении языка 
или текста? 

Переприменяет подсветку ко всему тексту. Нужно это потому, что highlightBlock() применяется к тексту, который мы меняем в данный момент. Если мы меняем язык или открываем другой файл без rehilight() то нам придётся ради подсветки переписывать весь текст.

------------------------------------------------------------------------------------------------------------------------

3. Какие сигналы и слоты используются в диалоге поиска и замены? 

В диалоге поиска и замены используются:
слоты из основного окна onFindText, onReplaceText, onReplaceAll, нужные для выполнения соответсвующих операций в нашем тексте (в основном окне);

on_findButton_clicked, on_replaceButton_clicked, on_replaceAllButton_clicked - слоты диалогового окна, которые активируются при получении сигнала от кнопок, нажимаемых в окне. В этих слотах в свою очередь отправляются сигналы findNext, replaceText, replaceAll основному окну.

-------------------------------------------------------------------------------------------------------------------------

4. Что хранится в JSON-файле при сохранении документа? 

Код на выбранном при написании языке. (может быть и некорректный)

-----------------------------------------------------------------------------------------------------------

5. Как восстанавливается язык программирования при открытии JSON
файла? 

Из QJsonObject (из QJsonDocument) извлекаем поле "language" и устанавливаем его значение в ComboBox.

-----------------------------------------------------------------------------------------------------------

6. Как работает связь между ComboBox и подсветкой кода? 

В ComboBox хранится перечисление имеющихся дефолтных подсветок, которым в рамках этого перечисления присвоены более читабельные для пользователя имена. Когда мы выбираем то или иное имя, тексту применяется соответствующая подсветка.

-----------------------------------------------------------------------------------------------------------

7. Какие классы Qt используются для создания пользовательского 
диалога поиска и замены? 

QDialog, а точнее его созданный нами подкласс SearchDialog
QLineEdit
QPushButton

(для работы много всего: QString, QTextCursor, QTextDocument)

-----------------------------------------------------------------------------------------------------------

8. Как применяется QTextCursor в данном проекте? 

QTextCursor используется в поиске для выделения нужного текста при нахождении, чтобы его потом можно было заменить.

-----------------------------------------------------------------------------------------------------------

9. Как проверить, были ли сделаны изменения в документе перед 
выходом? 

У TextDocument есть метод isModified(), который возвращает true, если в документ внесены изменения и fasle, если нет. Также после сохранения файла можно сделать setModified(false), чтобы программа не думала, что сохранения по прежнему не сохранены.

-----------------------------------------------------------------------------------------------------------

10. Какие классы и методы Qt используются для работы с JSON?

QJsonObject
QJsonDocument
QJsonParseError
QJsonValue